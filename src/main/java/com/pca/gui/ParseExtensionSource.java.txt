package com.pca.gui; /**
 * Created ia on 06/05/2020.
 */
import CartePokemon;
import Extension;
import ExtensionJAP;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;

public class ParseExtensionSource implements Runnable {
    public static int ns = 0;
    protected Extension extension=null;
    protected ExtensionJAP extensionJAP=null;
    protected ApplicationPM app;
    String title;
    int kkk=0;
    public DB DB;
    public static String dossierLocal;//
    ParseExtensionSource(){
        DB = new DB();
        this.dossierLocal= DB.getDossierImages();
    }

    @Override
    public void run() {

        File dir = new File(dossierLocal);
        dir.mkdirs();
        try {
            Connection connect = DB.getConnect();//
            Statement statement = connect.createStatement();
            String sql="SELECT extensionsource_id FROM extensionjap_extensionsource\n" +
                    "where extensionjap_id in (\n" +
                    "SELECT \n" +
                    "    ej.id\n" +
                    "FROM\n" +
                    "    extensionjap ej\n" +
                    "        LEFT JOIN\n" +
                    "    cartePokemon cp \n" +
                    "ON ej.id = cp.extensionjap_id\n" +
                    "where cp.extensionjap_id is null\n" +
                    ")";
            ResultSet rs = statement.executeQuery(sql);
            String notId = "(";
            while (rs.next()) {  /////   Boucle extensions
                int extensionsource_id =rs.getInt("extensionsource_id");
                notId+=extensionsource_id+",";
            }
            notId=notId.substring(0,notId.length()-1);
            notId+=")";

            sql= "SELECT extensionjap_id as jp ,min(extensionsource_id) as mn, max(extensionsource_id) as mx  FROM extensionjap_extensionsource group by extensionjap_id";

            rs = statement.executeQuery(sql);
            class MinMaxJap{
                ArrayList<Integer> min = new ArrayList<>();
                ArrayList<Integer> max = new ArrayList<>();
                /*MinMaxJap(int min,int max,int nb){
                    this.min=min;
                    this.max=max;
                }*/
            }
            MinMaxJap[] minmaxjap = new MinMaxJap[437];
            for(int i=1; i<437;i++)
                minmaxjap[i]= new MinMaxJap();
            while (rs.next()) {  /////   Boucle extensions
                int jap =rs.getInt("jp");
                int min =rs.getInt("mn");
                int max =rs.getInt("mn");
                minmaxjap[min].min.add(jap);
                minmaxjap[max].max.add(jap);
            }

            sql="SELECT * FROM " + DB.getTable_ExtensionSource()+" where id not in "+ notId + " order by id desc ";


            // sql="SELECT * FROM " + DB.getTable_ExtensionSource()+" where id in (323,228)"; // pour les tests

            rs.close();
            rs = statement.executeQuery(sql);
            ArrayList<Integer> idExtensionsSources = new ArrayList<>();
            while (rs.next()) {  /////   Boucle extensions
                int extensionSourceId =rs.getInt("id");
                idExtensionsSources.add(extensionSourceId);
            }
            rs.close();
            // Définition d'un container d'extensionsJAP.
            ArrayList<ExtensionJAP> containerExtensionsJAP = new ArrayList<>();
            // Introduction de min extensionsJAP dans le container
            for (int idExtensionSource :idExtensionsSources) {  /////   Boucle extensions
                for(int i :minmaxjap[idExtensionSource].min){
                    if(extraireEJ(i,containerExtensionsJAP)==null) {
                        //ExtensionJAP ej=new ExtensionJAP(i,true);
                        //containerExtensionsJAP.add(ej);
                    }
                }
                // Définition de la extensionSource
                ExtensionSource0 extensionSource = new ExtensionSource0(idExtensionSource);
                // Extraire les extensionsJAP à partir du container
                ArrayList<ExtensionJAP> extensionsJAP = piocherExtensionsJAPdans(containerExtensionsJAP,extensionSource.getIdExtensionsJap());
                extensionSource.setExtensionsJap(extensionsJAP);


                if(extensionSource.getExtensionsJap().size()==0)continue;

                String URL0 = extensionSource.getUrl(),URL;
                dir = new File(dossierLocal + "/" + extensionSource.getId());
                dir.mkdirs();
                //URL="https://jp.pokellector.com/sets/SP-Sword-Shield-Promos";
                String site = null,domaine=null;
                if(URL0.indexOf("pokellector")!=-1) {
                    site = "pokellector";
                    domaine="https://jp.pokellector.com";
                }else if (URL0.indexOf("tcgrepublic")!=-1) {
                    site = "tcgrepublic";
                    domaine="https://tcgrepublic.com";
                }
                ////////////   Travail pour une extension source donnée

                try {
                    int N =0,kk=1;
                    do {
                        Document docPage , doc;
                        //https://tcgrepublic.com/category/subcategory_page_2744.html?p=1
                        URL = URL0 + "?p=" + kk;
                        docPage = Jsoup.connect(URL).userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36")
                                .get();
                        doc = Jsoup.parseBodyFragment(docPage.toString());
                        Iterator<Element> ulContainer =null;
                        if(kk==1) {
                            if (doc.select("div.paginator_items_total").size() > 0)
                                N = Integer.parseInt(doc.select("div.paginator_items_total").first().text());
                        }
                        N-=48;kk++;

                        if (site.equals("tcgrepublic")) {
                            ulContainer = doc.select("ul#main_container").first().children().iterator();// c'est un BIG dans TABLE
                        } else if (site.equals("pokellector")) {
                            Element  doc1 = doc.select(".content.cardlisting").first();
                            ulContainer = doc1.children().iterator();
                        }

                        while (ulContainer.hasNext()) {//
                            Element li = ulContainer.next();
                            boolean pasEncore = true;
                            while (site.equals("pokellector") && pasEncore) {
                                if (!li.attr("class").trim().equals("card"))
                                    if(ulContainer.hasNext())
                                        li = ulContainer.next();
                                    else
                                        break;
                                else
                                    pasEncore = false;
                            }
                            //  Parser image
                            if(site.equals("pokellector") && pasEncore)break;
                            ImageCarte imageCarte = new ImageCarte();
                            imageCarte.setDomaine(domaine);
                            imageCarte.setExtensionSource(extensionSource);
                            imageCarte.parseImg(li);
                        }
                    }while(N>0);
                    ///////////   fin Travail pour une extension source donnée
                }catch(Exception excep){
                    System.out.println("probleme extension1  ..." + excep);
                }
                ///////
                //  ICI l'étude de l'extension source

                ArrayList<ImageCarte> T= extensionSource.getImagesCartes();
                Collections.sort(T);
                int n = T.size();
                if(n==0)continue;
                int[] format = new int[n+1];
                format[0] = 0;
                int i=1 ;
                for(int j=1;j<n;j++){
                    if(T.get(j).compareTo(T.get(j-1))!=0) {
                        format[i] = j;
                        i++;
                    }
                }
                format[i]=n;
                int[] p = Arrays.copyOf(format, i+1);
                format=null;
                for(int j=0;j<p.length-1;j++){
                    if(p[j+1]-p[j]==1){//    carte image unique
                        ImageCarte m = T.get(p[j]);
                        ArrayList<CartePokemon> mcartes = m.getCartes();
                        int nn = mcartes.size();
                        if(nn==0) {// n'existe pas une carte dans la base
                            T.get(p[j]).setStatut(6);
                        }else if(nn==1) {// il existe une carte unique
                            CartePokemon c =mcartes.get(0);
                            /*
                            if(c.getJapNumImagesCartes().size()>1) {
                                int k=0;
                                for(String s :c.getJapNumImagesCartes())
                                    if(s!=null)k++;

                                if(k==1)
                                    T.get(p[j]).setStatut(41);
                                else
                                    T.get(p[j]).setStatut(7);

                            }else

                             */
                                T.get(p[j]).setStatut(0);
                        } else if(nn>1){ // pas d'unicité
                            T.get(p[j]).setStatut(5);
                        }
                    }else {
                        for (int k = p[j]; k < p[j + 1]; k++) {
                            T.get(k).setStatut(4);
                        }
                    }
                }
                int pq=1;
                for(ImageCarte x : T) {
                    x.getImage().save();
                    System.out.println("N°= "+ (pq++) + " japName = "+x.japName+ "  japNum = "+x.japNum);
                    //x.save();
                }
                T=null;p=null;
                System.out.println("FIN DE L'EXTENSION SOURCE " + extensionSource.getId());
                ///////
                ArrayList<Integer> max = minmaxjap[idExtensionSource].max;
                for(int j  : max) {
                    for (int k = 0; k < containerExtensionsJAP.size(); k++) {
                        if (containerExtensionsJAP.get(k).getId() ==j)
                            containerExtensionsJAP.remove(k);
                    }
                }
            }//   Les extensions sources
        }catch(Exception excep){
            System.out.println("probleme extension2  ..." + excep);
        }
    }
    public static void main(String[] srt){
        ParseExtensionSource pes = new ParseExtensionSource();
        pes.run();
    }

    public String getDossierLocal() {
        return dossierLocal;
    }

    public void setDossierLocal(String dossierLocal) {
        this.dossierLocal = dossierLocal;
    }
    ExtensionJAP extraireEJ(int i,ArrayList<ExtensionJAP> idExtensionsJAP){
        if(idExtensionsJAP.size()==0)return null;
        for(ExtensionJAP x:idExtensionsJAP){
            if(x.getId()==i)return x;
        }
        return null;
    }

   ArrayList<ExtensionJAP>  piocherExtensionsJAPdans(ArrayList<ExtensionJAP> containerExtensionsJAP,ArrayList<Integer> idExtensionsJap){
        ArrayList<ExtensionJAP> T =new ArrayList<>();
        for(int i : idExtensionsJap){
            ExtensionJAP ej = extraireEJ(i,containerExtensionsJAP);
            if(ej!=null){
                T.add(ej);
            }else{
                //ej=new ExtensionJAP(i,true);
                containerExtensionsJAP.add(ej);
                T.add(ej);
            }

        }
        return T;
    }
}


